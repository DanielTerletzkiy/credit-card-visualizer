{"remainingRequest":"C:\\Users\\danie\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\danie\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\danie\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\danie\\Documents\\VUE PROJECTS\\PROTOTYPE\\single-files\\credit-card-visualizer\\credit-card.vue?vue&type=template&id=0902e174&","dependencies":[{"path":"C:\\Users\\danie\\Documents\\VUE PROJECTS\\PROTOTYPE\\single-files\\credit-card-visualizer\\credit-card.vue","mtime":1623274750014},{"path":"C:\\Users\\danie\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\danie\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgZGlzcGxheTogImZsZXgiLAogICAgICAgIHdpZHRoOiAiNjUwcHgiLAogICAgICAgIGJhY2tncm91bmQ6ICJ3aGl0ZSIsCiAgICAgICAgImJveC1zaGFkb3ciOiAicmdiYSgxMDAsIDEwMCwgMTExLCAwLjIpIDBweCA3cHggMjlweCAwcHgiLAogICAgICAgIHBhZGRpbmc6ICIxMnB4IiwKICAgICAgICAiYm9yZGVyLXJhZGl1cyI6ICIyNHB4IgogICAgICB9CiAgICB9LAogICAgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIsIGNsYXNzOiBfdm0uZmxpcCA/ICJmbGlwIiA6ICIiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQiLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICJ6LWluZGV4IjogIjEiLAogICAgICAgICAgICAgICJib3JkZXItcmFkaXVzIjogIjI0cHgiLAogICAgICAgICAgICAgICJib3gtc2hhZG93IjogInJnYmEoMTAwLCAxMDAsIDExMSwgMC4yKSAwcHggN3B4IDI5cHggMHB4IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZyb250IiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICJib3JkZXItcmFkaXVzIjogIjI0cHgiLAogICAgICAgICAgICAgICAgICB3aWR0aDogIjM0MHB4IiwKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjAwcHgiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDoKICAgICAgICAgICAgICAgICAgICAibGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCIgKyBfdm0uZ2V0Q2FyZEFjY2VudHMgKyAiKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgICAgdG9wOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAiMTZweCIsCiAgICAgICAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQiOiAiMjAwIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLmNyZWRpdENhcmRUeXBlKSArICIgIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7IHBvc2l0aW9uOiAiYWJzb2x1dGUiLCBsZWZ0OiAiMTZweCIgfSB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTJweCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBDQyAiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLmdldE51bWJlcikgKyAiICIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAiMTZweCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIxMnB4IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIE5hbWUgIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5uYW1lKSArICIgIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAiMTZweCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIxMnB4IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEV4cGlyYXRpb24gIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5nZXREYXRlKSArICIgIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJhY2siLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiMjRweCIsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMzQwcHgiLAogICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyMDBweCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOgogICAgICAgICAgICAgICAgICAgICJsaW5lYXItZ3JhZGllbnQodG8gbGVmdCwiICsgX3ZtLmdldENhcmRBY2NlbnRzICsgIikiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICByaWdodDogIjE2cHgiLAogICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjIwMCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5jcmVkaXRDYXJkVHlwZSkgKyAiICIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICByaWdodDogIjE2cHgiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTJweCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBDVkMgIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5jdmMpICsgIiAiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAibWFyZ2luLWxlZnQiOiAiMTBweCIsCiAgICAgICAgICAgICJtYXJnaW4tcmlnaHQiOiAiMTBweCIsCiAgICAgICAgICAgIGRpc3BsYXk6ICJmbGV4IiwKICAgICAgICAgICAgImZsZXgtZGlyZWN0aW9uIjogImNvbHVtbiIsCiAgICAgICAgICAgICJqdXN0aWZ5LWNvbnRlbnQiOiAic3BhY2UtZXZlbmx5IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICBtYXJnaW46ICIwcHgiLAogICAgICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICI2cHgiLAogICAgICAgICAgICAgICAgICBjb2xvcjogInJnYig1MCwgNTAsIDUwKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiBDQyAiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNjLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY2MiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAibnVtYmVyIiwgaWQ6ICJjYyIsIHBsYWNlaG9sZGVyOiAiQ0MiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jYyB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS5jYyA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJoNSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgbWFyZ2luOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiNnB4IiwKICAgICAgICAgICAgICAgICAgY29sb3I6ICJyZ2IoNTAsIDUwLCA1MCkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIgTmFtZSAiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm5hbWUsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJuYW1lIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogIm5hbWUiLCBpZDogIm5hbWUiLCBwbGFjZWhvbGRlcjogIk5hbWUiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5uYW1lIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLm5hbWUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyBkaXNwbGF5OiAiZmxleCIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiaDUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgIG1hcmdpbjogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiNnB4IiwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogInJnYig1MCwgNTAsIDUwKSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBEYXRlICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5kYXRlLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkYXRlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogIm1vbnRoIiwgaWQ6ICJkYXRlIiwgcGxhY2Vob2xkZXI6ICJkYXRlIiB9LAogICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5kYXRlIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3ZtLmRhdGUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiOHB4IiB9IH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIwcHgiLAogICAgICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjZweCIsCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJyZ2IoNTAsIDUwLCA1MCkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgQ1ZDICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jdmMsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImN2YyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiLAogICAgICAgICAgICAgICAgICBtYXg6ICI5OTkiLAogICAgICAgICAgICAgICAgICBtaW46ICIwMDAiLAogICAgICAgICAgICAgICAgICBpZDogImN2YyIsCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiQ1ZDIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY3ZjIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBmb2N1czogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLmZsaXAgPSB0cnVlCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIF92bS5mbGlwID0gZmFsc2UKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS5jdmMgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}